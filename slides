Ruby Has Types
!TITLE
Ruby Types
Turns Out™ They are Better Than Using Hashes and Strings for Everything

!CODE: language=ruby
class Product
  attr_reader :name, :price
  def initialize(name,price)
    @name  = name
    @price = price
  end
end

!CODE: language=ruby
macbook      = Product.new("Macbook"     , 999.10)
macbook2     = Product.new("Macbook 2"   , "999.10")
power_supply = Product.new("Power Brick" , 20.20)
lazer_watch  = Product.new("JBIWLC-5000" , 100000.1234)

#

!NORMAL
Are <code>macbook</code> and <code>macbook2</code> the same price?

!CODE: language=ruby callout=1,2
macbook      = Product.new("Macbook"     , 999.10)
macbook2     = Product.new("Macbook 2"   , "999.10")
power_supply = Product.new("Power Brick" , 20.20)
lazer_watch  = Product.new("JBIWLC-5000" , 100000.1234)

!CODE: language=ruby
macbook.price == macbook2.price

# => false


!NORMAL
How much for a Macbook and a Power Brick?

!CODE: language=ruby callout=1,3
macbook      = Product.new("Macbook"     , 999.10)
macbook2     = Product.new("Macbook 2"   , "999.10")
power_supply = Product.new("Power Brick" , 20.20)
lazer_watch  = Product.new("JBIWLC-5000" , 100000.1234)

!CODE: language=ruby
macbook.price + power_supply.price

# => 1019.3000000000001 

!NORMAL
Where do I get 34/100<sup>ths</sup> of a cent?

!BULLETS
The problem here
* <code>Product</code> is being mis-used
* Allowing bugs to be introduced in one place…
* …but manifest in another

!CODE: language=ruby
class Price

  attr_reader :price

  def initialize(price)
    @price = price
  end

  def to_s
    @price.to_s
  end
end

!CODE: language=ruby
macbook      = Product.new("Macbook"     , Price.new(999.10))
macbook2     = Product.new("Macbook 2"   , Price.new("999.10"))
power_supply = Product.new("Power Brick" , Price.new(20.20))

#

!NORMAL
Are <code>macbook</code> and <code>macbook2</code> the same price?

!CODE: language=ruby, callout=1,6
require 'bigdecimal'

class Price

  def initialize(price)
    @price = BigDecimal.new(price.to_s)
  end

  def ==(other)
    @price == other.price
  end

  def to_s
    @price.to_s("F")
  end
end

macbook.price == macbook2.price

# => true


!NORMAL
How much for a Macbook and a Power Brick?

!CODE: language=ruby
class Price
  def +(other)
    Price.new(@price + other.price)
  end
end

macbook.price + power_supply.price

# => 1019.3

!NORMAL
Where do I get 34/100<sup>ths</sup> of a cent?

!CODE: language=ruby callout=4,5,6
class Price
  def initialize(price)
    @price = BigDecimal.new(price.to_s)
    if @price.round(2) != @price
      raise "#{price} is not a price"
    end
  end
end

lazer_watch  = Product.new("JBIWLC-5000" , Price.new(100000.1234))

# => RuntimeError: 100000.1234 is not a price

!NORMAL
What's half-off $15.55?

!CODE: language=ruby
class Price
  def /(val)
    Price.new(@price / val)
  end
end

!CODE: language=ruby
Price.new("15.55") / 2

# => RuntimeError: 7.775 is not a price

!SECTION
We haven't thought through our “half-off” feature

!NORMAL
Had we used floats or strings, 
somewhere that half a cent would get rounded.

!NORMAL
Would you know where?

!IMAGE
superman_3.jpg

!IMAGE
office_space.jpg

!IMAGE
rounding.png

!CODE: language=ruby callout=4
class Price
  def /(other)
    quotient = @price / other
    Price.new(quotient.round(2,:banker))
  end
end

!SECTION
<code>Price</code> is a <em>Data Type</em>

!BULLETS
Data Type
* Set of allowed values (999, 20.20, but <em>not</em> 100000.1234)
* Set of allowed operations (<code>==</code>, <code>+</code>, <code>/</code>)

!NORMAL
<code>Price</code> becomes the embodiment of our domain decisions around pricing.
(which kinda makes sense)

!SECTION
Data Types aren't just for wrapping values

!CODE: language=ruby
ActiveRecord::Base.establish_connection(
  adapter:  "postgres",
  host:     "localhost",
  username: "myuser",
  password: "mypass",
  database: "somedatabase",
  poool:    25,
)

!CODE: language=ruby callout=7
ActiveRecord::Base.establish_connection(
  adapter:  "postgres",
  host:     "localhost",
  username: "myuser",
  password: "mypass",
  database: "somedatabase",
  poool:    25,
)

!NORMAL
Magic. Strings.

!CODE: language=ruby
class PostgresConnection
  def initialize(host:, username:, password:, database:, pool: 5)
    @host     = host
    @username = username
    @password = password
    @database = database
    @pool     = pool
  end

  def to_active_record_config
    {
       adapter: "postgres",
          host: @host,
      username: @username,
      password: @password,
      database: @database,
          pool: @pool,
    }
  end
end

!CODE: language=ruby
ActiveRecord.establish_connection(
    PostgresConnection.new(host: "localhost",
                       username: "myuser",
                       password: "mypass",
                       database: "somedatabase",
                          poool: 25).to_active_record_config)
# => ArgumentError: unknown keyword: poool

!SECTION
But the world wants nothing but Strings and Hashes!!!!

!NORMAL
Hashes, Strings, Number, Symbols etc. are <strong>primitives</strong> to use for <em>building</em> data types.

!NORMAL
Avoid using them directly
Convert primitives to your types early and often

!NORMAL
Consider the seams of your application

!IMAGE
app.png

!IMAGE
app_seams.png

!IMAGE
app_adapt.png

!NORMAL
How?

!SECTION
Database/ActiveRecord

!CODE: language=ruby
class Product < ActiveRecord::Base
  serialize :price, Price
end

!CODE: language=ruby
class Price
  def self.load(raw)
    self.new(raw)
  end

  def self.dump(price)
    price.to_s
  end
end

!COMMANDLINE
> Product.connection.execute("update product set price=123.456 where id = 23")
true
> Product.find(23)
ArgumentError: 123.456 is not a price

!NORMAL
Bugs: Contained

!BULLETS
User Input
* Wrap as necessary
* Conventions can help
* This is the trickiest

!NORMAL
Example

!CODE: language=ruby
puts "Create a new Product"

puts "Name?"
name = readline

puts "Price?"
price = readline

Product.new(name,Price.new(price))

!NORMAL
This is a bit tedious

!CODE: language=ruby
class Product
  def initialize(name,price)
    @name  = name
    @price = price.kind_of?(Price) ? price : Price.new(price)
  end
end

Product.new(name,price)
Product.new(name,Price.new(price))

!NORMAL
Conversion Function

!COMMANDLINE
> Integer(10)
10 
> Integer("10")
10 
> Float(10.0)
10.0 
> Float("10")
10.0 
> Array([1,2,3])
[1, 2, 3] 
> Array(nil)
[] 

!CODE: language=ruby
def Price(price)
  price.kind_of?(Price) ? price : Price.new(price)
end

class Product
  def initialize(name,price)
    @name  = name
    @price = Price(price)
  end
end

Product.new(name,price)

!CODE: language=ruby, callout=4
class ChargeCustomerSomeMoneyJob
  def self.perform(customer,amount)
    CreditCardProcessor.charge!(customer.processor_id,
                                Price(amount))
  end
end

!NORMAL
Protocols

!BULLETS
Representations
* <code>to_i</code> - I can be <em>represented</em> as an <code>Int</code>
* <code>to_a</code> - I can be <em>represented</em> as an <code>Array</code>
* <code>to_s</code> - I can be <em>represented</em> as a <code>String</code>

!BULLETS
Convertible to, i.e. “I can be treated as if I were an XXX”
* <code>to_int</code> - I can be treated as an <code>Int</code>
* <code>to_ary</code> - I can be treated as an <code>Array</code> (allows implementors to be “splatted”)
* <code>to_str</code> - I can be treated as a <code>String</code> (allows implementors to be “added” to strings)

!COMMANDLINE
> price = Price.new(100)
> "Cost is $" + price
TypeError: no implicit conversion of Price into String
	from (irb):1:in `+'
	from (irb):1
	from /Users/davec/.rvm/rubies/ruby-2.1.5/bin/irb:11:in main
> price.to_s
100            
> class Price
>   def to_str; to_s; end
> end
:to_str 
> "Cost is $" + price
"Cost is $100"

!CODE: language=ruby
class Price
  def to_price
    self
  end
end

def Price(price)
  price.to_price
rescue NoMethodError
  Price.new(price)
end

!CODE: language=ruby
class Share
  def initialize(symbol,share_price)
    @symbol = symbol
    @share_price = share_price
  end

  def to_price
    Price.new(@share_price)
  end
end

price = Price(Share.new("OPWR",8.12))

!NORMAL
Conversion functions and protocols let you safely convert where you need it
Makes handling I/O a lot simpler

!NORMAL
What about complex types e.g. API responses?

!CODE: language=json
{
  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
  "commit": {
    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
    "author": {
      "name": "Monalisa Octocat",
      "email": "support@github.com",
      "date": "2011-04-14T16:00:49Z"
    },
    "committer": {
      "name": "Monalisa Octocat",
      "email": "support@github.com",
      "date": "2011-04-14T16:00:49Z"
    },
    "message": "Fix all the bugs",
    "tree": {
      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    },
    "comment_count": 0
  },
  "author": {
    "login": "octocat",
    "id": 1,
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "octocat",
    "id": 1,
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    }
  ],
  "stats": {
    "additions": 104,
    "deletions": 4,
    "total": 108
  },
  "files": [
    {
      "filename": "file1.txt",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "status": "modified",
      "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
      "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
      "patch": "@@ -29,7 +29,7 @@\n....."
    }
  ]
}

!SECTION
Pluck What You NNeed

!CODE: language=ruby
class Author

  attr_reader :login, :avatar_url

  def initialize(hash)
    @login = hash[:login]
    @avatar_url = hash[:avatar_url]
  end

  def to_h
    {
      login: @login,
      avatar_url: @avatar_url,
    }
  end
end

class Commit

  attr_reader :url, :sha, :author

  def initialize(hash)
    @url = hash[:url]
    @sha = hash[:sha]
    @author = hash[:author]
  end

  def to_h
    {
      url: @url,
      sha: @sha,
      author: @author,
    }
  end
end

!SECTION
Or: use a class factory like <a href="https://github.com/tcrayford/Values">Values</a> or <a href="https://github.com/stitchfix/immutable-struct">immutable-struct</a>

!CODE: language=ruby
Author = ImmutableStruct.new(:login, :avatar_url)
Commit = ImmutableStruct.new(:url, :sha, :author)

#

!COMMANDLINE
> Author.new(login: "davetron5000", avatar_url: "http://...", foobar: "blah")
&lt;#Author @login="davetron5000" @avatar_url="http://..." &gt;
> author = Author.new(github_response["author"])
&lt;#Author ... &gt;
> commit = Commit.new(github_response.merge(author: author))
&lt;#Commit ... &gt;
> commit.author.login
"octocat"
> commit.url
"https://api.github.com/repos/octocat…
> commit.html_url
NoMethodError
> commit.to_h
{ "url" => "...", "sha" => "...", "author" => { "name" => "...", "avatar_url" => "..." } }

!NORMAL
Avoid passing around the Hash.

!SECTION
So…Hashes and Strings are dead to me now?

!BULLETS
Discover vs Implement
* Hashes and Strings are great when you don't know what types you need
* They let you move fast and iterate
* But when you are done…lock them down

!BULLETS
In Conclusion
* Data types make your code comprehensible
* Data types contain bugs to their source
* Data types puts your domain knowledge <em>in code</em>, not documentation

!SECTION
Thanks!
Dave Copeland | @davetron5000

!IMAGE
cover.jpg

!SECTION
Come Work at Stitch Fix
dave@stitchfix.com
UX • Engineering • DevOps
